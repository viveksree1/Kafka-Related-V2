# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# 	 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ inventory_hostname_short.split("kafka")[1] }}

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
{% if split_brain is defined %}
listener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
inter.broker.listener.name=INTERNAL
{% if listener is defined %}
listeners=INTERNAL://{{ listener }}:{{ KAFKA_BROKER_PORT | default(9092) }},EXTERNAL://{{ listener }}:{{ EXTERNAL_KAFKA_BROKER_PORT | default(29092) }}
{% else %}
listeners=INTERNAL://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ KAFKA_BROKER_PORT | default(9092) }},EXTERNAL://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ EXTERNAL_KAFKA_BROKER_PORT | default(29092) }}
{% endif %}
{% else %}
{% if listener is defined %}
listeners=PLAINTEXT://{{ listener }}:{{ KAFKA_BROKER_PORT | default(9092) }}
{% else %}
listeners=PLAINTEXT://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ KAFKA_BROKER_PORT | default(9092) }}
{% endif %}
{% endif %}

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
{% if split_brain is defined %}
{% if external_advertised_listener is defined %}
advertised.listeners=INTERNAL://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ KAFKA_BROKER_PORT | default(9092) }},EXTERNAL://{{ external_advertised_listener }}.{{ dns_domain }}:{{ EXTERNAL_KAFKA_BROKER_PORT | default(29092) }}
{% else %}
{# have to use multiple vars to build the FQDN rather than Ansible var inventory_hostname because in production inventory_hostname includes ".mgt." #}
advertised.listeners=INTERNAL://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ KAFKA_BROKER_PORT | default(9092) }},EXTERNAL://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ EXTERNAL_KAFKA_BROKER_PORT | default(29092) }}
{% endif %}
{% else %}
{% if advertised_listener is defined %}
advertised.listeners=PLAINTEXT://{{ advertised_listener }}:{{ KAFKA_BROKER_PORT | default(9092) }}
{% else %}
{# have to use multiple vars to build the FQDN rather than Ansible var inventory_hostname because in production inventory_hostname includes ".mgt." #}
advertised.listeners=PLAINTEXT://{{ inventory_hostname_short }}.{{ dns_domain }}:{{ KAFKA_BROKER_PORT | default(9092) }}
{% endif %}
{% endif %}

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
# nk customized:
# We tried the default of 3 and it seemed too low. We have extra CPU headroom, so
# temporarily putting this at 20. Later, we can further evaluate the Kafka JMX metric NetworkProcessorAvgIdlePercent
# to find an appropriate value.
num.network.threads=20

# The number of threads that the server uses for processing requests, which may include disk I/O
# nk customized:
# I suspect when we increase the number of network threads that we will also benefit from increasing the I/O threads.
# Not sure, but we have the CPU headroom. Later, we can further evaluate the Kafka JMX metric RequestHandlerAvgIdlePercent
# to find an appropriate value.
num.io.threads=15

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ KAFKA_LOG_DIRS }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=2

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor={{ KAFKA_REPLICATION_FACTOR_DEFAULT }}
transaction.state.log.replication.factor={{ KAFKA_REPLICATION_FACTOR_DEFAULT }}
transaction.state.log.min.isr=2

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours={{ kafka_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
log.retention.bytes={{ kafka_log_retention_size }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka_log_retention_size }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################## Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={% for server in KAFKA_ZOOKEEPER_HOST %}{{ server }}:{{ KAFKA_ZOOKEEPER_PORT }}{% if not loop.last %},{% endif %}{% endfor %}
{# Leave following line empty because Jinja2 strips newline from end of preceding line #}


# Timeout in ms for connecting to zookeeper
# nk increased this from default of 6000 due to Zookeeper not responding fast enough in:
# https://github.com/nk/service/commit/ca73aa65add2aced654dfbd791bd1f80467b9097
zookeeper.connection.timeout.ms=30000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms={{ KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS }}

#################### nk Additional Customized Values ####################

# Values are added with respect to the event service requirement
default.replication.factor={{ KAFKA_REPLICATION_FACTOR_DEFAULT }}
min.insync.replicas=2
num.replica.fetchers=5
